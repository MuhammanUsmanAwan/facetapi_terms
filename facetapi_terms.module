<?php

/**
 * Implements hook_block_info().
 */
function facetapi_terms_block_info() {
  $blocks = array();
  foreach (facetapi_terms_block_details() as $detail => $facet) {
    $blocks[$detail] = array(
      'info' => t("FacetApi:{$facet['label']} Single Block"),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

function facetapi_terms_build($search, $facet_name) {
  $build = array();
  $results = $search[1];
  if (isset($results['search_api_facets'])) {
    $values = $results['search_api_facets'][$facet_name];
    foreach ($values as $value) {
      $filter = $value['filter'];
      // As Facet API isn't really suited for our native facet filter
      // representations, convert the format here. (The missing facet can
      // stay the same.)
      if ($filter[0] == '"') {
        $filter = substr($filter, 1, -1);
      }
      elseif ($filter != '!') {
        // This is a range filter.
        $filter = substr($filter, 1, -1);
        $pos = strpos($filter, ' ');
        if ($pos !== FALSE) {
          $filter = '[' . substr($filter, 0, $pos) . ' TO ' . substr($filter, $pos + 1) . ']';
        }
      }
      $build[$filter] = array(
        '#count' => $value['count'],
      );
    }
  }
  return $build;
}

function facetapi_terms_block_details($index = '') {
  static $details;
  if (!isset($details)) {
    $searcher = facetapi_terms_get_search_info_index();
    $realm_name = 'block';
    $details = array();
    $i = 0;
    foreach (facetapi_get_enabled_facets($searcher, $realm_name) as $name => $facet) {
      $i++;
      $details["single_$i"] = $facet;
    }
  }
  if ($index != '' && isset($details[$index])) {
    return $details[$index];
  }
  return $details;
}

// Get Search Data.
function facetapi_terms_build_search_data() {
  static $search;
  // 以下为重新建立搜索数据.根据重写和没有定义Filter来获取所有的索引数据.
  if (!isset($search)) {
    // 先引用ctools文件为了防止错误： Fatal Error: Call to undefined function ctools_plugin_load_class().
    include_once drupal_get_path('module', 'ctools') . '/includes/plugins.inc';
    include_once drupal_get_path('module', 'facetapi_terms') . '/MySearchApiQuery.php';
    include_once drupal_get_path('module', 'facetapi_terms') . '/MyFacetapiFacetProcessor.php';
    include_once drupal_get_path('module', 'facetapi_terms') . '/MySearchApiFacetapiAdapter.php';
    include_once drupal_get_path('module', 'facetapi_terms') . '/MyFacetapiUrlProcessor.php';

    // Set query.
    $index = (search_api_index_load('default_node_index'));
    $query = new MySearchApiQuery($index);
    $query->execute();

    $search = facetapi_terms_current_search('facetapi_terms_server');
  }
  return $search;
}

function facetapi_terms_get_search_info_index() {
  $info = array_keys(facetapi_get_searcher_info());
  return reset($info);
}

function facetapi_terms_build_data($facet) {
  $search = facetapi_terms_build_search_data();
  //$my_data = search_api_current_search('my_server_id');
  $searcher = facetapi_terms_get_search_info_index();

  $adapter = facetapi_adapter_load($searcher);
  // $facet = facetapi_facet_load('field_category', $searcher);
  // get facet api.
  $facet_api = new FacetapiFacet($adapter, $facet);
  // process facet.
  $process = new MyFacetapiFacetProcessor($facet_api);
  $process->MyinitUrlProcessor('facetapi_terms');
  $build = facetapi_terms_build($search, $facet['field']);
  $process->setBuild($build);
  $process->Myprocess();

  return $process->getBuild();
  //   $process->process();
  //  facetapi_get_taxonomy_hierarchy;
  //  facetapi_get_taxonomy_hierarchy();
  //  $facet['hierarchy callback']($build, $adapter, $facet);
  //  $build = facetapi_build_realm($searcher, $realm_name);
  //    dpm($build);
}

/**
 * 获取一个静态的URL.
 * 此处会返回一个静态的数据和静态的URL.
 * $facet = facetapi_facet_load('field_category', $searcher);
 * */
function facetapi_terms_build_static_data($facet, $base_path = '') {
  $search = facetapi_terms_build_search_data();
  //$my_data = search_api_current_search('my_server_id');
  $searcher = facetapi_terms_get_search_info_index();
  $adapter = facetapi_adapter_load($searcher);
  // get facet api.
  $facet_api = new FacetapiFacet($adapter, $facet);
  // process facet.
  $process = new MyFacetapiFacetProcessor($facet_api);
  $process->MyinitUrlProcessor('facetapi_terms');
  // 清空Segments.
  $process->MyUrlprocess->ClearSegments();
  if($base_path) {
    $process->MyUrlprocess->setBasePath($base_path);
  }
  $build = facetapi_terms_build($search, $facet['field']);
  $process->setBuild($build);
  $process->Myprocess();

  return $process->getBuild();
  //   $process->process();
  //  facetapi_get_taxonomy_hierarchy;
  //  facetapi_get_taxonomy_hierarchy();
  //  $facet['hierarchy callback']($build, $adapter, $facet);
  //  $build = facetapi_build_realm($searcher, $realm_name);
  //    dpm($build);
}

/**
 * Implements hook_block_view().
 * */
function facetapi_terms_block_view($detail) {
  $facet = facetapi_terms_block_details($detail);
  $datas = facetapi_terms_build_data($facet);
  asort($datas);
//  $new_data = $new_data1 = array();
//  foreach($datas as $data_id => $data) {
//    $new_data[$data['#markup']] = array_merge($data, array('data_id' => $data_id));
//  }
//  dpm($new_data);
  $facet = facetapi_terms_block_details($detail);
  $block['subject'] = t($facet['label'] . '(Single block)');
  $block['content'] = facetapi_terms_items_list_each($datas);
  return $block;
}

/**
 * Static store for the searches executed on the current page. Can either be
 * used to store an executed search, or to retrieve a previously stored
 * search.
 *
 * @param $search_id
 *   For pages displaying multiple searches, an optional ID identifying the
 *   search in questions. When storing a search, this is filled automatically,
 *   unless it is manually set.
 * @param SearchApiQuery $query
 *   When storing an executed search, the query that was executed. NULL
 *   otherwise.
 * @param array $results
 *   When storing an executed search, the returned results as specified by
 *   SearchApiQueryInterface::execute(). An empty array, otherwise.
 *
 * @return array
 *   If a search with the specified ID was executed, an array containing
 *   ($query, $results) as used in this function's parameters. If $search_id is
 *   NULL, an array of all executed searches will be returned, keyed by ID.
 */
function facetapi_terms_current_search($search_id = NULL, SearchApiQuery $query = NULL, array $results = array()) {
  $searches = &drupal_static(__FUNCTION__, array());

  if (isset($query)) {
    if (!isset($search_id)) {
      $search_id = $query->getOption('search id');
    }
    $base = $search_id;
    $i = 0;
    while (isset($searches[$search_id])) {
      $search_id = $base . '-' . ++$i;
    }
    $searches[$search_id] = array($query, $results);
  }

  if (isset($search_id)) {
    return isset($searches[$search_id]) ? $searches[$search_id] : NULL;
  }
  return $searches;
}

/**
 * 建立数据.
 * */
function facetapi_terms_items_list_each($datas, $is_children = TRUE) {
  $items = array();
  $output = '';
  foreach ($datas as $key => $data) {
    $item = '';
    if ($key == '!') {
      continue;
    }
    $item = l($data['#markup'], $data['#path']);
    if (!empty($data['#item_children']) && $data['#active'] && $is_children) {
      $item .= facetapi_terms_items_list_each($data['#item_children']);
    }
    $items[] = $item;
  }
  return theme('item_list', array(
    'items' => $items,
    'type' => 'ul',
//    'attributes' => array('id' => 'scope-list'),
//    'container_id' => 'scope-list-wrapper',
      )
  );
}

/**
 * Implements hook_facetapi_url_processors().
 */
function facetapi_terms_facetapi_url_processors() {
  return array(
    'facetapi_terms' => array(
      'handler' => array(
        'label' => t('Facet all terms'),
        'class' => 'MyFacetapiUrlProcessor',
      ),
    ),
  );
}
